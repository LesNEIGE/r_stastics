coinname
coinname <- html_nodes(html, 'p.sort_coin')
coinname <- html_text(coinname)
coinname
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
url2 <-'https://www.bithumb.com/'
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
bprice <-html_text(bprice)
btitle<- html_text(btitle)
btitle
bprice
coinname
url2 <-'https://www.bithumb.com/'
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
url2 <-'https://www.bithumb.com/'
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
coinprice <- html_nodes(html, 'sort_real')
coinprice <- html_text(coinprice)
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
coinprice <- html_nodes(html, 'sort_real')
coinprice <- html_text(coinprice)
coinprice
coinprice <- html_nodes(html, 'p.sort_real')
coinprice <- html_text(coinprice)
coinprice
coinprice <- html_nodes(html, 'span.sort_real')
coinprice <- html_text(coinprice)
coinprice
coinprice <- html_nodes(html, 'id.sort_real')
coinprice <- html_text(coinprice)
coinprice
coinprice <- html_nodes(html, 'strong.sort_real')
coinprice <- html_text(coinprice)
coinprice
sj <- data.frame(stdName, kor, eng , mat)
stdName <- c('지현','혜교','수지')
kor <- c(90,78,68)
eng <- c(85,49,95)
mat <- c(85,80,60)
sj <- data.frame(stdName, kor, eng , mat)
x <- 10
if(x %% == 0){
"짝수입니다."
} else {
"홀수입니다."
}
x <- 10
if(x %% = 0){
print("짝수입니다.")
} else {
print("홀수입니다.")
}
x <- 10
if(x %% = 0){
print("짝수입니다.")
} else {
print("홀수입니다.")
}
if(x %% == 0){
print("짝수입니다.")
} else {
print("홀수입니다.")
}
x <- 14
if (x %% == 7){
print('7의배수')
}else{
print('아님')
}
if(x %% = 7){
print('7의배수')
}else{
print('아님')
}
x <- 10
if(x %% = 7){
print('7의배수')
}else{
print('아님')
}
x <- 10
x
if(x %% 2 == 0){
print("짝수")
}else{
print("홀수")
}
coinprice <- html_nodes(html, 'strong.sort_real')
coinprice <- html_text(coinprice)
coinprice <-gsub('원','',coinprice)
coinprice <-gsub(',','',coinprice)
coinprice <-as.double(coinprice)
coinprice
coinprice <-as.integer(coinprice)
coinprice
coinprice <-as.numeric(coinprice)
coinprice
a <- 35
b <- 41
if(a > b){
print('a는 b보다 크다')
}else if (a < b){
print('a는 b보다 작다')
}else {
print('a와 b는 같다')
}
a <- 41
b <- 41
if(a > b){
print('a는 b보다 크다')
}else if (a < b){
print('a는 b보다 작다')
}else {
print('a와 b는 같다')
}
coinname
x <- 21
ifelse((x %% 7 == 0), print('7의 배수'), print('아님'))
x <- 21
ifelse((x %% 7 == 0), print('7의 배수'), print('아님'))
y <- 21
ifelse((y %% 7 == 0), print('7의 배수'), print('아님'))
head(bookinfo) <- NULL
y <- 21
ifelse((y %% 7 == 0), print('7의 배수'), print('아님'))
y <- 21
ifelse((y %% 7 == 0), print('7의 배수'), print('아님'))
a <- 15
b <- 37
ifelse((a > b), 'a는 b보다 크다', 'a는 b보다 작다')
a <- 15
b <- 37
ifelse((a > b), 'a는 b보다 크다', ((a < b), 'a는 b보다 작다', 'a와 b는 같다')))
ifelse((a > b), 'a는 b보다 크다', (((a < b), 'a는 b보다 작다', 'a와 b는 같다')))
ifelse((a > b), 'a는 b보다 크다', (((a < b), 'a는 b보다 작다', 'a와 b는 같다')))
ifelse((a > b), 'a는 b보다 크다',
a <- 15
b <- 37
ifelse((a > b), 'a는 b보다 크다',
ifelse((a > b), 'a는 b보다 크다',
ifelse((a < b), 'a는 b보다 작다' , 'a와 b는 같다'))
a <- 15
b <- 37
ifelse((a > b), 'a는 b보다 크다',
ifelse((a < b), 'a는 b보다 작다' , 'a와 b는 같다'))
a <- 37
b <- 37
ifelse((a > b), 'a는 b보다 크다',
ifelse((a < b), 'a는 b보다 작다' , 'a와 b는 같다'))
View(bookinfo)
setwd('C:/Users/tjoeun/Desktop/R')
a <- 37
b <- 37
ifelse((a > b), 'a는 b보다 크다',
ifelse((a < b), 'a는 b보다 작다' , 'a와 b는 같다'))
stdName <- c('지현','혜교','수지')
kor <- c(90,78,68)
eng <- c(85,49,95)
mat <- c(85,80,60)
sj <- data.frame(stdName, kor, eng , mat)
sj$tot <- sj$kor + sj$eng + sj$mat
sj$avg <- sj$tot / 3
View(sj)
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) >=50,'가')))))
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) <60,'가')))))
stdName <- c('지현','혜교','수지')
kor <- c(90,0,68)
eng <- c(85,1,95)
mat <- c(85,2,60)
sj <- data.frame(stdName, kor, eng , mat)
sj$tot <- sj$kor + sj$eng + sj$mat
sj$avg <- sj$tot / 3
View(sj)
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) <60,'가')))))
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) <60,'가')))))
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) <60,'가')))))
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) < 60,'가')))))
stdName <- c('지현','혜교','수지')
kor <- c(90,70,68)
eng <- c(85,90,95)
mat <- c(85,80,60)
sj <- data.frame(stdName, kor, eng , mat)
sj$tot <- sj$kor + sj$eng + sj$mat
sj$avg <- sj$tot / 3
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) < 60,'가')))))
coininfo <- data.frame(coinname, coinprice, stringsAsFactors = F)
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
coinprice <- html_nodes(html, 'strong.sort_real')
coinprice <- html_text(coinprice)
coinprice <-gsub('원','',coinprice)
coinprice <-gsub(',','',coinprice)
coinprice <-as.numeric(coinprice)
coinprice
coininfo <- data.frame(coinname, coinprice, stringsAsFactors = F)
coinprice <-as.integer(coinprice)
coininfo <- data.frame(coinname, coinprice, stringsAsFactors = F)
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
coinprice <- html_nodes(html, 'strong.sort_real')
coinprice <- html_text(coinprice)
coinprice <-gsub('원','',coinprice)
coinprice <-gsub(',','',coinprice)
coinprice <-as.integer(coinprice)
coinprice
coininfo <- data.frame(coinname, coinprice, stringsAsFactors = F)
write.csv(coininfo, file = 'coininfo.csv',row.names = F)
sj$grd((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) < 60,'가')))))
stdName <- c('지현','혜교','수지')
kor <- c(90,70,68)
eng <- c(85,90,95)
mat <- c(85,80,60)
sj <- data.frame(stdName, kor, eng , mat)
sj$tot <- sj$kor + sj$eng + sj$mat
sj$avg <- sj$tot / 3
ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) < 60,'가')))))
sj$grd((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양',
ifelse((sj$avg) < 60,'가')))))
sj$grd<-((sj$avg >= 90), '수',
((sj$avg) >= 80, '우',
((sj$avg) >=70 , '미',
((sj$avg) >=60, '양',
((sj$avg) < 60,'가')))))
Manager <- c(1, 2, 3, 4, 5)
Date <- factor(c("10/24/14", "10/28/14", "10/01/14", "10/12/14", "05/01/14"))
Country <- factor(c("Us", "US", "UK", "UK", "UK"))
Gender <- factor(c("M", "F", "F", "M", "F"))
mgrage <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5,NA,2)
q5 <- c(5, 5, 2,NA,1)
leadership <- data.frame(Manager, Date, Country, Gender, mgrage, q1, q2, q3, q4, q5)
leadership
View(leadership)
ifelse((mrage >=66), '노년',
ifelse((mrage >=46). '중년' ,
ifelse((mrage>=31 ,'장년',
ifelse((mrage =<30 ,'청년')))))
ifelse((mgrage >=66), '노년',
ifelse((mgrage >=46). '중년' ,
ifelse((mgrage>=31 ,'장년',
ifelse((mgrage =<30 ,'청년')))))
ifelse((leadership$mgrage >=66), '노년',
ifelse((leadership$mgrage >=46), '중년' ,
ifelse((leadership$mgrage>=31) ,'장년', '청년')))
leadership$mgrage >=66 <- '노년년'
leadership$mgrages<- ifelse((leadership$mgrage >=66), '노년',
ifelse((leadership$mgrage >=46), '중년' ,
ifelse((leadership$mgrage>=31) ,'장년', '청년')))
View(leadership)
stdName <- c('지현','혜교','수지')
kor <- c(90,70,68)
eng <- c(85,90,95)
mat <- c(85,80,60)
sj <- data.frame(stdName, kor, eng , mat)
sj$tot <- sj$kor + sj$eng + sj$mat
sj$avg <- sj$tot / 3
sj$grd<- ifelse((sj$avg >= 90), '수',
ifelse((sj$avg) >= 80, '우',
ifelse((sj$avg) >=70 , '미',
ifelse((sj$avg) >=60, '양','가'))))
View(sj)
#R로 크롤링 하기
#crawling 또는 scraping은 웹페이지의 내용중 필요한 데이터를 추출하는 행위
#크롤링을 제대로 하려면 웹이 작동하는 방식과
#웹 표준 기술을 잘 파악하고 있어야 함 (HTNL/CSS/JS)
#hanb.co.kr / k-apt.go.kr
#R에서는 rvest 패키지 이용해서 크롤링 할 수 있음
#파이썬의 beautifulsoup4에서 영감받아 만든 패키지
install.packages('rvest')
library(rvest)
?rvest
#한빛출판사의 '새로나온페이지'에서
#도서제목, 자자, 가격을 크롤링해서
#newbooks라는 데이터프레임을 만들고
#newbooks.csv라는 파일로 저장 (또는 newbooks 테이블에 저장)
#수집할 데이터가 있는 url 정의
url <-'https://www.hanbit.co.kr/store/books/new_book_list.html'
#정의한 url로 부터 html 소스를 가져옴 : read_html
#read_html(대상url)
html <- read_html(url)
html
#데이터 탐색과 추출 : html_nodes, html_text
#html_nodes(소스, 찾을 대상) : 지정한 위치의 요소를 가져옴
#html_text(요소명) : 요소에서 텍스트를 추출해 냄
#찾을 대상은 tag명, css선택자등으로 지정가능
#특정 tag로 요소탐색
title <- html_nodes(html, 'title') #웹페이지 제목
#웹페이지의 제목(title)요소를 찾아서
html_text(title)
#제목(title)요소의 텍스트를 추출
#ex) h2태그의 텍스트를 추출
h2 <- html_nodes(html, 'h2')
html_text(h2)
#하나 이상일 경우 nodes
#도서제목 추출
#유일한 이름 찾음
#->p 태크의 class의 book_tit 라는 class속성 이용
#->css 선택자 : p.book_tit
btitle <- html_nodes(html, 'p.book_tit')
btitle<- html_text(btitle)
btitle
btitle<-gsub('∙','·',btitle)
#gsub(찾을 문자, 바꿀문자, 대상)
#가격, 저자
bwriter <- html_nodes(html, 'p.book_writer')
bwriter <-html_text(bwriter)
#span태그의 price라는 class속성 이용
bprice <-html_nodes(html, 'span.price')
bprice <-html_text(bprice)
bprice
#원, 콤마 제거 / 문자를 숫자로 변경
bprice <-gsub('원','',bprice)
bprice <-gsub(',','',bprice)
bprice <-as.integer(bprice)
bprice
#데이터프레임 생성
bookinfo <- data.frame(btitle, bwriter,bprice ,
stringsAsFactors = F)
install.packages("rvest")
bprice <-as.integer(bprice)
bprice
bprice <-as.numeric(bprice)
bprice
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
coinprice <- html_nodes(html, 'strong.sort_real')
coinprice <- html_text(coinprice)
coinprice <-gsub('원','',coinprice)
coinprice <-gsub(',','',coinprice)
coinprice <-as.integer(coinprice)
coinprice
coininfo <- data.frame(coinname, coinprice, stringsAsFactors = F)
write.csv(coininfo, file = 'coininfo.csv',row.names = F)
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
coinprice <- html_nodes(html, 'strong.sort_real')
coinprice <- html_text(coinprice)
coinprice <-gsub('원','',coinprice)
coinprice <-gsub(',','',coinprice)
coinprice <-as.integer(coinprice)
coinprice
coininfo <- data.frame(coinname, coinprice, stringsAsFactors = F)
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
coinname
coinprice <- html_nodes(html, 'strong.sort_real')
coinprice <- html_text(coinprice)
coinprice <-gsub('원','',coinprice)
coinprice <-gsub(',','',coinprice)
coinprice <-as.integer(coinprice)
coinprice
coinname
url2 <-'https://www.bithumb.com/'
html <- read_html(url2)
coinname <- html_nodes(html, 'span.sort_coin')
coinname <- html_text(coinname)
#수집할 데이터가 있는 url 정의
url <-'https://www.hanbit.co.kr/store/books/new_book_list.html'
#정의한 url로 부터 html 소스를 가져옴 : read_html
#read_html(대상url)
html <- read_html(url)
html
#데이터 탐색과 추출 : html_nodes, html_text
#html_nodes(소스, 찾을 대상) : 지정한 위치의 요소를 가져옴
#html_text(요소명) : 요소에서 텍스트를 추출해 냄
#찾을 대상은 tag명, css선택자등으로 지정가능
#특정 tag로 요소탐색
title <- html_nodes(html, 'title') #웹페이지 제목
#웹페이지의 제목(title)요소를 찾아서
html_text(title)
#제목(title)요소의 텍스트를 추출
#ex) h2태그의 텍스트를 추출
h2 <- html_nodes(html, 'h2')
html_text(h2)
#하나 이상일 경우 nodes
#도서제목 추출
#유일한 이름 찾음
#->p 태크의 class의 book_tit 라는 class속성 이용
#->css 선택자 : p.book_tit
btitle <- html_nodes(html, 'p.book_tit')
btitle<- html_text(btitle)
btitle
btitle<-gsub('∙','·',btitle)
#gsub(찾을 문자, 바꿀문자, 대상)
#가격, 저자
bwriter <- html_nodes(html, 'p.book_writer')
bwriter <-html_text(bwriter)
#span태그의 price라는 class속성 이용
bprice <-html_nodes(html, 'span.price')
bprice <-html_text(bprice)
bprice
#원, 콤마 제거 / 문자를 숫자로 변경
bprice <-gsub('원','',bprice)
bprice <-gsub(',','',bprice)
bprice <-as.numeric(bprice)
bprice
library(rvest)
도서제목, 자자, 가격을 크롤링해서
#newbooks라는 데이터프레임을 만들고
#newbooks.csv라는 파일로 저장 (또는 newbooks 테이블에 저장)
#수집할 데이터가 있는 url 정의
url <-'https://www.hanbit.co.kr/store/books/new_book_list.html'
#정의한 url로 부터 html 소스를 가져옴 : read_html
#read_html(대상url)
html <- read_html(url)
html
#데이터 탐색과 추출 : html_nodes, html_text
#html_nodes(소스, 찾을 대상) : 지정한 위치의 요소를 가져옴
#html_text(요소명) : 요소에서 텍스트를 추출해 냄
#찾을 대상은 tag명, css선택자등으로 지정가능
#특정 tag로 요소탐색
title <- html_nodes(html, 'title') #웹페이지 제목
#웹페이지의 제목(title)요소를 찾아서
html_text(title)
#제목(title)요소의 텍스트를 추출
#ex) h2태그의 텍스트를 추출
h2 <- html_nodes(html, 'h2')
html_text(h2)
#하나 이상일 경우 nodes
#도서제목 추출
#유일한 이름 찾음
#->p 태크의 class의 book_tit 라는 class속성 이용
#->css 선택자 : p.book_tit
btitle <- html_nodes(html, 'p.book_tit')
btitle<- html_text(btitle)
btitle
btitle<-gsub('∙','·',btitle)
#gsub(찾을 문자, 바꿀문자, 대상)
#가격, 저자
bwriter <- html_nodes(html, 'p.book_writer')
bwriter <-html_text(bwriter)
#span태그의 price라는 class속성 이용
bprice <-html_nodes(html, 'span.price')
bprice <-html_text(bprice)
bprice
#원, 콤마 제거 / 문자를 숫자로 변경
bprice <-gsub('원','',bprice)
bprice <-gsub(',','',bprice)
bprice <-as.numeric(bprice)
bprice
